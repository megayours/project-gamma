
operation register_chain(_chain: name) {
  require_oracle();
  val chain = _chain.lower_case();
  create chain(chain);
}

operation process_transfer_event(_chain: name, address: byte_array, block_height: integer, event_id: text, token_id: big_integer, to: byte_array, amount: big_integer) {
  require_oracle();

  val chain = _chain.lower_case();
  val contract = require(
    contract @? { .chain.name == chain, .address == address },
    "Contract not found"
  );
  require(contract.block_height <= block_height, "Provided block height %s is not greater than or equals the last processed block height %s".format(block_height, contract.block_height));

  create processed_event(contract, event_id);
  contract.block_height = block_height;

  val external_token = yours.external.external_token @? { .chain == chain, .contract == address, .token.id == token_id };
  if (external_token == null) {
    process_mint_event(contract, block_height, event_id, token_id, to, amount);
    return;
  }

  val token = external_token.token;
  val from_account = external_token.owner;
  val to_account = yours.external._ensure_evm_account(to);
  yours._transfer(token, yours.transfer_info(from = from_account, to = to_account, amount = amount), chain_context.blockchain_rid);
  external_token.owner = to_account;

  val transfer_message = yours.external.transfer_message(
    token_id = token_id,
    from = from_account.id,
    to = to,
    amount = amount,
    chain = chain,
    contract = address,
  ).to_gtv();

  send_message(_format_topic(chain, address), [integer(2).to_gtv(), transfer_message].to_gtv());
  yours.external._handle_message(chain_context.blockchain_rid, _format_topic(chain, address), transfer_message);
}

operation process_metadata_update(_chain: name, address: byte_array, token_id: big_integer, metadata: json) {
  require_oracle();

  val chain = _chain.lower_case();
  val contract = require(
    contract @? { .chain.name == chain, .address == address },
    "Contract not found"
  );

  val external_token = yours.external.external_token @? { .chain == chain, .contract == address, .token.id == token_id };
  if (external_token == null) return;

  val attributes = yours._json_to_gtv_map(metadata);
  yours._import_attributes(external_token.token, attributes);

  val metadata_message = yours.external.metadata_updated_message(
    token_id = token_id,
    metadata = metadata,
    chain = chain,
    contract = address,
  ).to_gtv();

  send_message(_format_topic(chain, address), [integer(1).to_gtv(), metadata_message].to_gtv());
}

function process_mint_event(contract, block_height: integer, event_id: text, token_id: big_integer, to: byte_array, amount: big_integer) {
  val project = yours.project_info(contract.project, chain_context.blockchain_rid);
  val token_info = yours.token_info(
    project,
    collection = contract.collection,
    type = yours.token_type.external,
    name = "TBD",
    modules = []
  );
  val token = yours.create_token_with_id(token_info, token_id);

  val account = yours.external._ensure_evm_account(to);
  yours.external._attach(token, contract.chain.name, contract.address, account, amount);

  yours._mint(token, yours.balance_info(account, amount), chain_context.blockchain_rid);

  val mint_message = yours.external.mint_message(
    project = contract.project,
    collection = contract.collection,
    token_id = token_id,
    to = to,
    amount = amount,
    chain = contract.chain.name,
    contract = contract.address,
  ).to_gtv();

  send_message(_format_topic(contract.chain.name, contract.address), [integer(0).to_gtv(), mint_message].to_gtv());
}