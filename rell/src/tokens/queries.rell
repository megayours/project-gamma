query list_chains() {
  return chain @* {} ( .name );
}

query list_contracts() {
  return contract @* {} ( 
    chain = .chain.name,
    address = .address,
    project = .project,
    collection = .collection,
    block_height = .block_height,
    type = .type
  );
}

query list_minted_tokens(after_rowid: integer, take: integer) {
  return (c: contract, et: yours.external.external_token) @* { 
    et.rowid > rowid(after_rowid),
    c.chain.name == et.chain,
    c.address == et.contract
  } ( 
    chain = et.chain, 
    address = et.contract, 
    token_id = et.token.id,
    rowid = et.rowid,
    metadata = yours.get_metadata(et.token),
    contract_type = c.type,
    type = et.token.type
  ) limit take;
}

query list_minted_tokens_with_unattached_metadata(after_rowid: integer, take: integer) {
  return (
    c: contract,
    et: yours.external.external_token,
    @outer am: attached_metadata @* { .token == et.token }
  ) @* { 
    et.rowid > rowid(after_rowid),
    c.chain.name == et.chain,
    c.address == et.contract,
    am == null
  } ( 
    chain = et.chain, 
    address = et.contract, 
    token_id = et.token.id,
    rowid = et.rowid,
    metadata = yours.get_metadata(et.token),
    contract_type = c.type,
    type = et.token.type
  ) limit take;
}

query is_event_processed(chain: name, address: byte_array, event_id: text) {
  return processed_event @? { .contract.chain.name == chain.lower_case(), .contract.address == address, .event_id == event_id } != null;
}

query has_mint_occured(chain: name, address: byte_array, token_id: big_integer) {
  return yours.external.external_token @? { 
    .chain == chain, 
    .contract == address, 
    .token.id == token_id 
  } != null;
}

query get_token(chain: name, address: byte_array, token_id: big_integer) {
  return yours.external.external_token @? {
    .chain == chain.lower_case(),
    .contract == address,
    .token.id == token_id
  } (
    chain = .chain,
    address = .contract,
    project = .token.collection.project.name,
    collection = .token.collection.name,
    token_id = .token.id,
    owner = .owner.id,
    metadata = yours.get_metadata(.token),
    type = .token.type
  );
}

query get_owned_tokens_of_contract(chain: name, address: byte_array, owner: byte_array) {
  return (et: yours.external.external_token, tb: yours.token_balance) @* {
    et.token == tb.token,
    tb.account.id == owner,
    et.chain == chain.lower_case(),
    et.contract == address
  } (
    project = et.token.collection.project.name,
    collection = et.token.collection.name,
    token_id = et.token.id,
    metadata = yours.get_metadata(et.token)
  );
}

query get_owned_tokens(owner: byte_array) {
  return (et: yours.external.external_token, tb: yours.token_balance) @* {
    et.token == tb.token,
    tb.account.id == owner
  } (
    project = et.token.collection.project.name,
    collection = et.token.collection.name,
    token_id = et.token.id,
    metadata = yours.get_metadata(et.token)
  );
}

query get_token_after(rowid: integer) {
  val token_data = yours.external.external_token @? { .rowid > rowid(rowid) } (
    rowid = .rowid,
    chain = .chain,
    contract = .contract,
    owner_account_id = .owner.id,
    token = (
      project = (
        name = .token.collection.project.name,
        blockchain_rid = .token.collection.project.blockchain_rid
      ),
      collection = .token.collection.name,
      token_id = .token.id,
      metadata = yours.get_metadata(.token)
    )
  ) limit 1;

  if (token_data == null) return null;

  val owner_external_address = (main_ad: ft4.accounts.main_auth_descriptor, signer: ft4.accounts.auth_descriptor_signer) @? {
    main_ad.account.id == token_data.owner_account_id,
    main_ad.auth_descriptor == signer.account_auth_descriptor
  } (
    signer.id
  ) limit 1;

  return (
    rowid = token_data.rowid,
    chain = token_data.chain,
    contract = token_data.contract,
    owner_account_id = token_data.owner_account_id,
    owner_external_address = owner_external_address,
    token = token_data.token
  );
}
